//AUTHOR: Joshua Del Mundo
//COURSE: CPT187
//PURPOSE: Program allows user create an account and login to buy a variety of items with discounts and there are stock limitations.
//STARTDATE: 4/27/2021
package edu.cpt187.delmundo.exercise6;

import java.util.Scanner;


public class MainClass
{
	// Declare and Initialize all class constants
	public static final char MENU_CHARS[] = { 'A', 'B', 'Q' };
	public static final String MENU_OPTIONS[] = { "Login", "Create an Account", "Quit" };
	public static final char FILE_MENU_CHARS[] = { 'A', 'B', 'R' };
	public static final String FILE_MENU_OPTIONS[] = { "Load Inventory", "Create Order", "Return to Main Menu" };
 	public static final char SUB_MENU_CHARS[] = { 'A', 'B', 'C', 'D' };
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	// START OF main method
	public static void main(String[] args)
	{
		// Create one instance from the supportive class using an instantiation
		// statement
		
		Inventory currentInventory = new Inventory();
		
		Order currentOrder = new Order();
		
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		
		Scanner input = new Scanner(System.in); // Creates the scanner
		
		String userName = "";
		char menuSelection = ' ';
		
		// Display Welcome Banner
		displayWelcomeBanner();
		
		
		// Prime Read of main menu selection
		menuSelection = validateMenuSelection(input);

		// START OF run-while until quit loop
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountsArrays();

			// Get user name
			userName = getUserName(input);

			// Test if menu selection was 'A'
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				// Test if getSearchedIndex is greater than or equal to 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				} // END OF getSearchedIndex test
					// START OF getSearchedIndex else
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				} // END OF getSearchedIndex else
			} // END OF 'A' test
				// START OF menu selection 'A' else
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				// Test if getSearchedIndex is less than 0
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				} // END OF getSearchedIndex index test
					// START OF getSearchedIndex index else
				else
				{
					menuSelection = validateFileSelection(input);
					// run while menuSelection is not 'R'
					while (menuSelection != 'R')
					{
						// Test if menuSelection is equal to 'A'
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							// Test if getRecordCount is less than or equal to 0
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							} // END OF getRecordCount test
							// START OF getRecordCount else
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							} // END OF getRecordCount else
						} // END OF menuSelection test
						// START OF menuSelection else
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							// Test if getItemSearchIndex is less than 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							} // END OF getItemSearchIndex test
							// START OF getItemSearchIndex else
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));
								// Test if in stock count is less than item quantity
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder
										.getHowMany())
								{
									displayOutOfStock();
								} // END OF in stock count test
								// START OF in stock count else
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input,
											currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(),
											currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(),
											currentOrder.getItemPrice(), currentOrder.getHowMany(),
											currentOrder.getTotalCost());
									// Test if discount rate is greater than 0
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(),
												currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(),
												currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									} // END OF discount rate test
									// START OF discount rate else
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(),
												currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									} // END OF discount rate else
								} // END OF in stock else
							} // END OF getItemSearchIndex else
						} // END OF menuSelection else
						// Modify LCV of file menu selection
						menuSelection = validateFileSelection(input);
					} // END OF run-while menuSelection is not 'R'
				} // END OF getSearchedIndex index else
			} // END OF menuSelection 'A' else
			// Modify LCV of main menu selection
			menuSelection = validateMenuSelection(input);
		} // END OF run-while until quit

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		// Test if getRecordCount is greater than 0
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(),
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(),
					currentInventory.getGrandTotal());
		} // END OF getRecordCount test

		// Display Farewell Message
		displayFarewellMessage(userName);
		
		input.close(); // Closes the Scanner
	}// END OF main method

	
	// Welcome Banner method
	public static void displayWelcomeBanner()
	{// START of Welcome Banner method
		System.out.println("Welcome to the Order and Prize Program!");
		System.out.println("This program allows the user to select a discount rate,");
		System.out.println("item, and quantity to purchase. The user will receive");
		System.out.println("order report, final report, and a random prize at the end.");
		System.out.println("------------------------------------------------------------");
	}// END OF Welcome Banner method
	
	// Farewell Message Method
	public static void displayFarewellMessage(String borrowedUserName)
	{// START OF Farewell Message method
		System.out.println("Thank you for using this program, " + borrowedUserName + ".");
		System.out.println("Have a good day!");
	}// END OF Farewell Message method

	// Main Menu Void Method
	// Method will display main menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("------------------------------------------------------------");
		System.out.println("MAIN MENU");
		// run-while from first index to last index of array
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%-4s%-10s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		} // END OF menu options run-while
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter your selection here: ");
	}// END OF display main menu method
	
	// Discount Menu Void Method
	// Method will display discount menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("------------------------------------------------------------");
		System.out.println("DISCOUNT MENU");
		// run-while from first index to last index of array
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2s%-4s%-17s%4.1f%1s\n", SUB_MENU_CHARS[localIndex], "for ",
					borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, " %");
			localIndex++;
		} // END OF discount names run-while
		System.out.println("------------------------------------------------------------");
		System.out.print("Please make your selection here: ");
	}// END OF display discount menu method
	
	// File menu void method
	// method will display file menu
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("------------------------------------------------------------");
		System.out.println("FILE MENU");
		// run-while from first index to last index of array
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%-4s%-10s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		} // END OF menu options run-while
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter your selection here: ");
	}// END OF displayFilemenu
	
	// Record Report void method
	// Method will display the amount of records processed
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("RECORD REPORT");
		System.out.println(borrowedRecordCount + " records processed");
		System.out.println("------------------------------------------------------------");
	}// END OF record report method
	
	// Out of stock Void Method
	// Method will display that item quantity entered is greater than current stock
	public static void displayOutOfStock()
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("------------------------------------------------------------");
	}// END OF display out of stock error method
	
	// File error method
	// Method will display that the file failed to open or was not found
	public static void displayFileError()
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened.");
		System.out.println("------------------------------------------------------------");
	}// END OF file error method
	
	// Not Found Error void method
	// Method will display that the search value entered was not found
	public static void displayNotFound()
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("------------------------------------------------------------");
	}// END OF not found void method
	
	// Display Account Results method
	// Method will display that a new account has been created
	public static void displayAccountResults()
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("------------------------------------------------------------");
	}// END OF displayAccountResults
	
	// Overloaded Display Account Results method
	// Method will display account results
	public static void displayAccountResults(String userName)
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("------------------------------------------------------------");
	}// END OF displayAccountResults
	
	// Login Error Void Method
	// Method will display the login error
	public static void displayLoginError()
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("------------------------------------------------------------");
	}// END OF displayLoginError
	
	// Order Report Void Method
	// Method will display order report
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice,
			int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt,
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("ORDER REPORT");
		System.out.println("------------------------------------------------------------");
		System.out.printf("%-17s%3s%-11s\n", "Customer Name:", "", userName);
		System.out.println("");
		System.out.printf("%-17s%3s%-11s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-17s%4s%9.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-17s%3s%-11s\n", "Discount Name:", "", borrowedDiscountName);
		System.out.printf("%-17s%2s%10.1f%2s\n", "Discount Rate:", "", borrowedDiscountRate * 100, "%");
		System.out.printf("%-17s%4s%9.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-17s%4s%9.2f\n", "Discounted Price:", "$", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-17s%4s%9d\n", "Quantity:", "", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-17s%4s%9.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-17s%2s%10.1f%2s\n", "Tax Rate:", "", borrowedTaxRate * 100, "%");
		System.out.printf("%-17s%4s%9.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-17s%4s%9.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-17s%3s%-11s\n", "Prize:", "", borrowedPrizeName);
		// Test if item still has stock left
		if (borrowedInStockCount > 0)
		{
			System.out.println("");
			System.out.println(
					"Buy more now: Only " + borrowedInStockCount + " " + borrowedItemName + "s left in-stock!");
		} // END OF stock count test
		System.out.println("------------------------------------------------------------");
	}// END OF display order report method

	// Overloaded Order Report Void Method
	// Method will display order report
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice,
			int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("------------------------------------------------------------");
		System.out.println("ORDER REPORT");
		System.out.println("------------------------------------------------------------");
		System.out.printf("%-17s%3s%-11s\n", "Customer Name:", "", userName);
		System.out.println("");
		System.out.printf("%-17s%3s%-11s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-17s%4s%9.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-17s%4s%9d\n", "Quantity:", "", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-17s%4s%9.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-17s%2s%10.1f%2s\n", "Tax Rate:", "", borrowedTaxRate * 100, "%");
		System.out.printf("%-17s%4s%9.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-17s%4s%9.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-17s%3s%-11s\n", "Prize:", "", borrowedPrizeName);
		// Test if item still has stock left
		if (borrowedInStockCount > 0)
		{
			System.out.println("");
			System.out.println(
					"Buy more now: Only " + borrowedInStockCount + " " + borrowedItemName + "s left in-stock!");
		} // END OF stock count test
		System.out.println("------------------------------------------------------------");
	}// END OF display overloaded order report method
	
	// Final Report Void Method
	// Method will display final report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("------------------------------------------------------------");
		System.out.println("FINAL REPORT");
		System.out.println("------------------------------------------------------------");
		System.out.printf("%-5s%-29s%-10s%-7s%-6s\n", "ID","NAME","PRICE","QTY","TOTAL");
		// run-while localIndex is less than borrowedRecordCount
		while (localIndex < borrowedRecordCount)
		{
			System.out.printf("%-5d%-29s%-4s%-8.2f%-5d%-4s%-6.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex],"$",borrowedItemPrices[localIndex],borrowedOrderQuantities[localIndex],"$",borrowedOrderTotals[localIndex]);
			localIndex++;
		}// END OF run-while
		System.out.println("");
		System.out.println("GRAND TOTAL");
		System.out.printf("%-7s%-5.2f\n", "$", borrowedGrandTotal);
		System.out.println("------------------------------------------------------------");
	}// END OF display final report method
	
	
	// User name Method
	// Method will retrieve user's name
	public static String getUserName(Scanner borrowedInput)
	{// START of user name method
		String localUserName = "";
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		// Return user name to main method
		return localUserName;
	}// END OF user name method
	
	// Password Method
	// Method will retrieve Password
	public static String getPassword(Scanner borrowedInput)
	{// START of Password method
		String localPassword = "";
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		// Return Password to main method
		return localPassword;
	}// END OF Password method
	
	// Get File Name Method
	// Method will retrieve the file name
	public static String getFileName(Scanner borrowedInput)
	{// START OF getFileName
		String localFileName = "";
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		localFileName = borrowedInput.next();
		// Return file name to main method
		return localFileName;
	}// END OF getFileName
	
	// Main menu VR Method
	// Method will retrieve main menu selection, validate, then return input to main
	// method, or allow user to quit
	public static char validateMenuSelection(Scanner borrowedInput)
	{// START OF main menu VR method
		char localSelection = ' ';
		// Prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0); // Main menu Selection and upper-case conversion
		// Validate if main menu selection was correct
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			// DISPLAY error message
			System.out.println("~~ERROR: Invalid selection.~~");
			// Update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0); // Main menu Selection and upper-case
																			// conversion
		} // END OF correct selection validation
			// Return main menu selection to main method
		return localSelection;
	}// END OF main menu VR method
	
	// Item Quantity VR Method
	// Method will retrieve item quantity, validate, then return input to main
	// method
	public static String validateHowMany(Scanner borrowedInput)
	{// START OF item quantity VR method
		int localHowMany = 0;
		// Prime read
		System.out.print("Please enter how many will be purchased: ");
		localHowMany = borrowedInput.nextInt(); // Item quantity
		// Validate if value was correct
		while (localHowMany <= 0)
		{
			// DISPLAY error message
			System.out.println("~~ERROR: Invalid selection.~~");
			// Update read
			System.out.print("Please enter how many will be purchased: ");
			localHowMany = borrowedInput.nextInt(); // Item quantity
		} // END OF value validation
			// Return value to main method
		return String.valueOf(localHowMany);
	}// END OF item quantity VR method

	// Discount Menu Method
	// Method will retrieve discount selection, validate, then return input to main
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames,
			double[] borrowedDiscountRates)
	{// START OF discount menu VR method
		char localSelection = ' ';
		// Prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		// Validate if discount selection was correct
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			// DISPLAY error message
			System.out.println("~~ERROR: Invalid selection.~~");
			// Update Read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0); // Discount selection and upper-case
																			// conversion
		} // END of discount selection validations
			// Return discount selection to main method
		return localSelection;
	}// END OF discount menu VR method
	
	// Validate Search method
	// Method will validate search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchIndex = 0;
		System.out.println("------------------------------------------------------------");
		System.out.print("Enter the search value: ");
		localSearchIndex = borrowedInput.nextInt(); // Search Value
		// Validate if value entered was correct
		while (localSearchIndex <= 0)
		{
			System.out.println("~~ERROR: Invalid selection.~~");
			System.out.println("------------------------------------------------------------");
			System.out.print("Enter the search value: ");
			localSearchIndex = borrowedInput.nextInt(); // Search Value
		} // END OF validation
		return localSearchIndex;
	}// END OF validate search method
	
	// Validate file selection
	// Method will retrieve file menu selection, validate, then return input to main
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		// Prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0); // File menu Selection and upper-case conversion
		// Validate if File menu selection was correct
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			// DISPLAY error message
			System.out.println("~~ERROR: Invalid selection.~~");
			// Update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0); // File menu Selection and upper-case
																			// conversion
		} // END OF correct selection validation
		// Return File menu selection to main method
		return localSelection;
	}// END OF validateFileSelection
}// END OF Main Class
